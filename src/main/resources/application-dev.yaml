spring:
  cloud:
    openfeign:
      client:
        refresh-enabled: true
        config:
          json-placeholder-client:
            connectTimeout: 2000   # ms
            readTimeout: 5000      # ms
            loggerLevel: FULL      # NONE, BASIC, HEADERS, FULL
          nano-service-client:
            connectTimeout: 2000   # ms
            readTimeout: 5000      # ms
            loggerLevel: FULL      # NONE, BASIC, HEADERS, FULL
  graphql:
    graphiql:
      enabled: true        # Enable GraphiQL UI
      path: /graphiql      # Path for GraphiQL
    http:
      path: /graphql
  jpa:
    open-in-view: false
    generate-ddl: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    database: postgresql
    show-sql: true
    hibernate:
      ddl-auto: update
  datasource:
    url: jdbc:postgresql://localhost:5432/a2zdb   # Replace with your Postgres host/port/db
    driver-class-name: org.postgresql.Driver
    username: postgres                              # Replace with your Postgres user
    password: password           # Replace with your Postgres password
    hikari:
      pool-name: A2ZPostgresHikariPool
      register-mbeans: true
      maximum-pool-size: 64        # Tune based on DB cores and expected load
      minimum-idle: 32             # Half of max pool size is reasonable
      connection-timeout: 5000     # Fail fast if no connection available
      idle-timeout: 600000         # 10 minutes
      max-lifetime: 1770000        # ~29.5 minutes
      leak-detection-threshold: 30000  # 30 seconds
      validation-timeout: 5000
      connection-test-query: "SELECT 1"
      auto-commit: false
      read-only: false
      isolate-internal-queries: true
  docker:
    compose:
      enabled: true
      lifecycle-management: start_only

## Spring Boot actuator endpoints
management:
  endpoint:
    health:
      show-components: always
      show-details: always
      access: unrestricted
    circuitbreakers:
      enabled: true
    metrics:
      access: unrestricted
    prometheus:
      access: unrestricted
  endpoints:
    web:
      exposure:
        include: '*'
  health:
    circuitbreakers:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true
  tracing:
    enabled: true
    propagation:
      type: w3c
    sampling:
      probability: 1.0
  otlp:
    tracing:
      endpoint: http://localhost:4318/v1/traces
      export:
        enabled: true

logging:
  level:
    org:
      springframework:
        web:
          filter:
            CommonsRequestLoggingFilter: DEBUG