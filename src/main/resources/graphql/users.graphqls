extend type Query {
    users: UserQueryOperations
}

extend type Mutation {
    users: UserMutationOperations
}

type UserQueryOperations {
    getUserByUserId(userId: Int!): UserDTO
    getAllUsers: [UserDTO]
    searchUsers(searchUsersRequest: SearchUsersRequest!): [UserDTO]
}

type UserMutationOperations {
    search: [UserDTO]
}

type UserDTO {
    userEntityPK: UserEntityPK
    username: String
    firstName: String,
    lastName: String,
    email: String,
    password: String,
    gender: Gender,
    address: Address

    createdBy: String,
    createdOn: String,
    updatedBy: String,
    updatedOn: String
}

type UserEntityPK {
    userId: ID
}

type Address {
    userEntityPK: UserEntityPK

    city: String
    state: String
    country: String
    zipcode: String
    addressType: AddressType

    createdBy: String,
    createdOn: String,
    updatedBy: String,
    updatedOn: String
}

input SearchUsersRequest {
    searchOptions: [SearchOption]
    sortBy: String
    sortingOrder: SortingOrder
}

input SearchOption {
    field: String
    data: String
    searchStrategy: SearchStrategy
}